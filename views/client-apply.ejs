<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Simple CRM Apply</title>
    <meta
      content="width=device-width, initial-scale=1.0, shrink-to-fit=no"
      name="viewport"
    />
    <link rel="icon" href="/assets/img/favicon-sc.svg" type="image/x-icon"/>
    

    <!-- CSS Files -->
    <link rel="stylesheet" href="/assets/css/bootstrap.min.css" />
    <link rel="stylesheet" href="/assets/css/kaiadmin.min.css" />
    <link rel="stylesheet" href="/assets/css/fonts.min.css" media="all">
    <script src="/assets/js/plugin/webfont/webfont.min.js"></script>
    <link rel="stylesheet" href="/assets/css/crm.css" />
    <style>
      .page-inner > .card{background: unset;}
      .page-inner > .card-header{background: white!important;}
    </style>
  </head>
  <body>
    <div class="wrapper">
        <div class="container">
          <div class="page-inner">
            <div class="card">
              <div class="card-header">
                <h3 class="fw-bold mb-3">SS CRM 서비스 신청</h3>
                <p class="card-category">SS CRM 서비스 신청을 환영합니다.</p>
              </div>
              <div class="card-body">
                <ul class="timeline">
                  <li>
                    <div class="timeline-badge"><i class="far fa-paper-plane"></i></div>
                    <div class="timeline-panel">
                      <div class="timeline-heading">
                        <h4 class="timeline-title">서비스 신청 접수</h4>
                        <p>
                          <small class="text-muted"><i class="far fa-paper-plane"></i><span class="client-date">dddd</span> via SS CRM</small>
                        </p>
                      </div>
                      <div class="timeline-body">
                        <p>
                          <span>Client ID : </span> <span class="client-id"></span><br>
                          <span>Email : </span> <span class="client-email"></span><br>
                          <span>Phone : </span> <span class="client-tel"></span><br>
                        </p>
                      </div>
                    </div>
                  </li>
                  <li class="timeline-inverted">
                    <div class="timeline-badge primary"><i class="far fa-bell"></i></div>
                    <div class="timeline-panel">
                      <div class="timeline-heading">
                        <h4 class="timeline-title">서비스 개설 안내</h4>
                      </div>
                      <div class="timeline-body">
                        <p>
                          위에 신청한대로 서비스가 개설됩니다. <br>
                          신청한 정보를 확인하시고 맞으면 아래의 "서비스 신청 완료"버튼을 클릭해주세요. <br>
                        </p>
                        <hr>
                        <button type="button" class="btn btn-primary form-control command-create-client">서비스 신청 완료</button>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="timeline-badge danger"><i class="icon-close"></i></div>
                    <div class="timeline-panel">
                      <div class="timeline-heading">
                        <h4 class="timeline-title">서비스 개설 취소 안내</h4>
                      </div>
                      <div class="timeline-body">
                        <p>
                          본 서비스를 개설을 취소하시려면 아래의 "서비스 신청 취소"버튼을 클릭해주세요. <br>
                          신청후 2주내 완료하지 않으면 서비스 신청이 취소됩니다. <br>
                        </p>
                        <hr>
                        <button type="button" style="max-width: 150px;" class="btn btn-danger form-control command-delete-client">서비스 신청 취소</button>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>  
            </div>
            
            
          </div>
        </div>
    </div>

      <modal-page></modal-page>

    
    <!--   Core JS Files   -->
    <script src="/assets/js/core/jquery-3.7.1.min.js"></script>
    >
    <!-- Kaiadmin DEMO methods, don't include it in your project! -->
    <script src="/util/util.js"></script>
    <script src="/util/store.js"></script>
    <!-- 컴포넌트 -->
    <script src="/component/crm/abs-component.js"></script>
    <script src="/component/crm/modal-page.js"></script>
    <script src="/component/crm/info-message.js"></script>
    <!-- Fonts and icons -->
    <script src="/assets/js/plugin/webfont/webfont.min.js"></script>
    <script>
      WebFont.load({
        google: { families: ["Public Sans:300,400,500,600,700"] },
        custom: {
          families: [
            "Font Awesome 5 Solid",
            "Font Awesome 5 Regular",
            "Font Awesome 5 Brands",
            "simple-line-icons",
          ],
          urls: ["/assets/css/fonts.min.css"],
        },
        active: function () {
          sessionStorage.fonts = true;
        },
      });
    </script>
    <script>
      const _client = `<%= JSON.stringify(client) %>`;
      const clientInfo = JSON.parse(_client.replaceAll('&#34;', '\"'));
      const userInfo = {};
      const companyInfo = {};
      const customerInfo = {};
      const productInfo = {};
      const sheetInfo = {};
      const workInfo = {};
      
      const boardInfoList = [];
      
      document.addEventListener('DOMContentLoaded', function () {

        setDocument();

        document.addEventListener('click', handleClick);
        
        function handleClick(e) {
          //e.preventDefault();
          e.composedPath().find((node)=>{
            if(node.nodeName === 'svg' || node.nodeName === 'path') return false;
            if(typeof(node.className) === 'object' || !node.className || !node.className?.match(/command/)) return false;
            if(node.className.match(/command-create-client/))
            {
              disableButton();  
              addInfo();
              return;
            }
            if(node.className.match(/command-delete-client/))
            {
              disableButton();
              deleteInfo();
              return;
            }  
          });
        }
      });

  function setDocument()
  {
    const clientId = document.querySelector('.client-id');
    const clientEmail = document.querySelector('.client-email');
    const clientTel = document.querySelector('.client-tel');
    const clientDate = document.querySelector('.client-date');

    clientId.innerText = clientInfo.clientId;
    clientEmail.innerText = clientInfo.email;
    clientTel.innerText = clientInfo.tel;
    clientDate.innerText = util.dateDotFormat(clientInfo.date);
  }    

  async function addInfo()
	{
    const formData = new FormData();
    formData.append('_id', clientInfo._id);
    formData.append('authCode', clientInfo.authCode);
    try{
			await util.sendFormData(`/client/add`, "POST", formData);
      await makeUserTable();
      showAddModal()
		}
		catch (error) {
            console.error('오류:', error);
            alert('실패했습니다.');
        }
		return;
	}

  async function deleteInfo()
	{
    const formData = new FormData();
    formData.append('_id', clientInfo._id);
    formData.append('authCode', clientInfo.authCode);
    try{
			await util.sendFormData(`/client/cancle`, "POST", formData);
      showDeleteModal()
		}
		catch (error) {
            console.error('오류:', error);
            alert('실패했습니다.');
        }
		return;
	}

  function showAddModal()
  {
    const modal = document.querySelector('modal-page');
    const defaultMessage = {
      title:"서비스 신청완료",
      message:"신청이 완료되었습니다. <br> 이메일로 서비스 계정정보가 발송되었습니다. <br> 서비스 계정정보를 확인하시고 로그인해주세요.",
      close:false,
      button:{
        text:"Main으로 돌아가기",
        link:"/"
      }
    };
    const infoMessage = new InfoMessage(defaultMessage);
    
    modal.appendComponent(infoMessage);
  }

  function showDeleteModal()
  {
    const modal = document.querySelector('modal-page');
    const defaultMessage = {
      title:"서비스 신청 취소",
      message:"신청이 취소 되었습니다. ",
      close:false,
      button:{
        text:"Main으로 돌아가기",
        link:"/"
      }
    };
    const infoMessage = new InfoMessage(defaultMessage);
    
    modal.appendComponent(infoMessage);
  }

  async function addDoc(formData, command)
	{
		try{
			return await util.sendFormData(`/client/addDoc`, "POST", formData);
		}
		catch (error) {
            console.error('오류:', error);
            alert('실패했습니다.');
        }
		return;
	}

  disableButton = () => {
    document.querySelectorAll('button').forEach(button=>{
      button.setAttribute('disabled','disabled');
      button.classList.remove('command-create-client','command-delete-client')
    })
  }


  makeUserTable = async () => {
    const formData = new FormData();
    formData.append('model', 'User');
    formData.append('username', `admin@${clientInfo.clientId}.crm`);
    formData.append('email', clientInfo.email);
    formData.append('name', '관리자');
    formData.append('degree', '관리자')
    formData.append('department', '기타')
    formData.append('position', '사원')
    formData.append('clientId', clientInfo.clientId)
    const result = addDoc(formData, "COMMAND-");
    result.then(async (response) => {
      if(response.code === 100)
      { 
        Object.assign(userInfo, response.data.info);
        await makeCompanyTable();
        await makeBoardInfoTable();
      }
    });
  }

  makeCompanyTable = async () => {
    const formData = new FormData();
    formData.append('model', 'Company');
    formData.append('name', 'Sample Company');
    formData.append('user', userInfo._id);
    formData.append('address', '가산시 가상동 123-456');
    formData.append('memo', 'Sample Company Memo')
    formData.append('tel', '02-1234-5678')
    formData.append('fax', '02-1234-9999')
    formData.append('clientId', clientInfo.clientId)
    const result = addDoc(formData, "COMMAND-");
    result.then(async (response) => {
      if(response.code === 100)
      { 
        Object.assign(companyInfo, response.data.info);
        await makeCustomerTable();
      
      }
    });
    
  }
    
  makeCustomerTable = async () => {
    const formData = new FormData();
    formData.append('model', 'Customer');
    formData.append('name', '홍길동');
    formData.append('user', userInfo._id);
    formData.append('address', '가산시 가상동 123-456 2층');
    formData.append('memo', 'Sample Customer Memo')
    formData.append('position', 'Manager')
    formData.append('email', 'hong@test.com')
    formData.append('tel', '02-1234-5678')
    formData.append('hp', '010-1234-9999')
    formData.append('clientId', clientInfo.clientId)
    formData.append('company', companyInfo._id)
    const result = addDoc(formData, "COMMAND-");
    result.then(async (response) => {
      if(response.code === 100)
      { 
        Object.assign(customerInfo, response.data.info);
        await makeProductTable();
      }
    });
  }

  makeProductTable = async () => {
    const formData = new FormData();
    formData.append('model', 'Product');
    formData.append('name', '아이템 A212-3(샘플)');
    formData.append('code', '제품')
    formData.append('brand', '자체생산')
    formData.append('memo', '2025년까지 판매 예정')
    formData.append('clientId', clientInfo.clientId)
    const result = addDoc(formData, "COMMAND-");
    result.then(async (response) => {
      if(response.code === 100)
      { 
        Object.assign(productInfo, response.data.info);
        await makeSheetTable();
      
      }
    });
  }

  makeSheetTable = async () => {

    const _productInfo = {
      id: productInfo._id,
      code: productInfo.code,
    }
    const formData = new FormData();
    formData.append('model', 'Sheet');
    formData.append('name', '글로벌 컴퍼니 영업기회(샘플)');
    formData.append('memo', 'Sample 영업기회 Memo')
    formData.append('product', JSON.stringify(_productInfo))
    formData.append('step', '제안')
    formData.append('clientId', clientInfo.clientId)
    formData.append('company', companyInfo._id)
    formData.append('user', userInfo._id);
    formData.append('customer', customerInfo._id);
    const result = addDoc(formData, "COMMAND-");
    result.then(async (response) => {
      if(response.code === 100)
      { 
        Object.assign(sheetInfo, response.data.info);
        await makeWorkTable();
      }
    });
  }

  makeWorkTable = async () => {
    const formData = new FormData();
    formData.append('model', 'Work');
    formData.append('name', '담당자 첫미팅(샘플)');
    formData.append('memo', 'Sample 영업일지 Memo')
    formData.append('remark', 'Sample 영업일지 고려사항')
    formData.append('status', '타겟제품정보')
    formData.append('sheet', sheetInfo._id)
    formData.append('clientId', clientInfo.clientId)
    formData.append('company', companyInfo._id)
    formData.append('user', userInfo._id);
    formData.append('customer', customerInfo._id);
    const result = addDoc(formData, "COMMAND-");
    result.then((response) => {
      if(response.code === 100)
      { 
        Object.assign(workInfo, response.data.info);
      }
    });
  }


  makeBoardInfoTable = async () => {
    const tableList = [
      {
        name:"고객사",
        type:"default",
        tag:"company",
      },
      {
        name:"고객",
        type:"default",
        tag:"customer",
      },
      {
        name:"품목",
        type:"default",
        tag:"product",
      },
      {
        name:"캘린더",
        type:"default",
        tag:"calendar",
      },
      {
        name:"영업기회",
        type:"default",
        tag:"sheet",
      },
      {
        name:"영업일지",
        type:"default",
        tag:"work",
      },
      {
        name:"공지사항",
        type:"custom",
        tag:"notice",
      }
    ];
    tableList.forEach((table) => {
      const formData = new FormData();
      formData.append('model', 'BoardInfo');
      formData.append('name', table.name);
      formData.append('type', table.type)
      formData.append('tag', table.tag)
      formData.append('clientId', clientInfo.clientId)
      formData.append('user', userInfo._id);
      const result = addDoc(formData, "COMMAND-");
      result.then((response) => {
        if(response.code === 100)
        { 
          boardInfoList.push(response.data.info);
          makeNoticeTable();
        }
      });
    });
  }

  makeNoticeTable = async () => {
    let boardInfo = boardInfoList.find((info) => info.tag === 'notice');
    if(!boardInfo) return;
    const formData = new FormData();
    formData.append('model', 'Board');
    formData.append('title', 'SS CRM 공지사항');
    formData.append('contents', 'SS CRM 공지사항 내용')
    formData.append('boardId', boardInfo._id)
    formData.append('clientId', clientInfo.clientId)
    formData.append('user', userInfo._id);
    const result = addDoc(formData, "COMMAND-");
  }

    </script>
  </body>
</html>
